from snakemake.utils import min_version
import os
from snakemake.shell import shell
import pandas as pd

__author__ = 'Kuan-Hao Chao <b05901180@ntu.edu.tw>'

#------------ Config setup ------------
configfile: "config.yaml"
print(os.path.join(config["datadir"]))
workdir: os.path.join(config["datadir"])
trimmomatic_jar = config["trimmomatic"]["trimmomatic_jar"]
# pipesDir = os.path.join(os.path.expanduser(config['bin_dir']), 'pipes', 'rules')

# Tabular configuration
# samples = pd.read_table(config["samples"]).set_index("sample", drop=FALSE)
# validate(samples, schema="schemas/cells.schema.yaml")

#------------ Definition fo all_input ------
samples_list_key = config["samples_list_key"]
# Getting samples
samples = []
for i in samples_list_key:
    for j in samples_list_key[i]:
        samples.append(j)

#------------ Target File -------------
rule targets:
    input:
        "time/start_time.txt",
        expand(os.path.join("{sample}", "Step_1", "trimmed_paired",
                            "{sample}_r1_paired.fastq.gz"), sample=samples),
        expand(os.path.join("{sample}", "Step_1", "QC", "pre",
                            "{sample}_multiqc.html"), sample=samples),
        expand(os.path.join("{sample}", "Step_1", "QC", "post",
                            "{sample}_multiqc.html"), sample=samples),

        expand(os.path.join("{sample}_a5.final.scaffolds.fasta.contigs.fsa"), sample=samples),
        expand(os.path.join("{sample}", "Step_2", "a5_miseq",
                            "{sample}_a5.final.scaffolds.fasta.contigs.fsa"), sample=samples),

        expand(os.path.join("{sample}", "Step_3", "quast", "report.pdf"), sample=samples),
        expand(os.path.join("{sample}", "Step_3", "bowtie2", "bowtie_index"), sample=samples),
        expand(os.path.join("{sample}", "Step_3", "bowtie2", "bowtie_index",
                            "{sample}.1.bt2"), sample=samples),
        expand(os.path.join("{sample}", "Step_3", "bowtie2", "{sample}.bam"), sample=samples),

        expand(os.path.join("{sample}", "Step_4", "samtools", "{sample}_fixmate.bam"), sample=samples),

        expand(os.path.join("{sample}", "Step_4", "samtools", "{sample}_sorted.bam"), sample=samples),
        expand(os.path.join("{sample}", "Step_5", "bcftools", "{sample}.vcf"), sample=samples),
        expand(os.path.join("{sample}", "Step_5", "bcftools", "{sample}_revise.vcf"), sample=samples),
        expand(os.path.join("{sample}", "Step_5", "bcftools", "{sample}_revise.vcf.gz"), sample=samples),
        expand(os.path.join("{sample}", "Step_6", "snpeff", "{sample}.ann.vcf"), sample=samples),
        expand(os.path.join("{sample}", "Step_6", "snpeff", "{sample}_snpEff_summary.html"), sample=samples),

        # # expand(os.path.join("{sample}", "Step_4", "bcftools", "{sample}.vcf"), sample=samples),
        # expand(os.path.join("{sample}", "Step_4", "bcftools", "{sample}.vcf"), sample=samples),
        # expand(os.path.join("{sample}", "Step_4", "bcftools", "{sample}_revise.vcf"), sample=samples),
        # expand(os.path.join("{sample}", "Step_4", "bcftools", "{sample}_revise.vcf.gz"), sample=samples),
        # # expand(os.path.join(
        # #     config["datadir"], "Read_Subtraction", "bwa", "sam", "{sample}.sam"), sample=samples),
        # # expand(os.path.join( "{sample}", "Step_5", "snpeff", "{sample}.vcf2"), sample=samples),
        # expand(os.path.join("{sample}", "Step_5", "snpeff", "{sample}.ann.vcf"), sample=samples),


        # expand(os.path.join("{sample}", "Step_6", "gatk", "{sample}.dict"), sample=samples),
        # expand(os.path.join("{sample}", "Step_6", "gatk", "{sample}.vcf.gz.tbi"), sample=samples),
        # expand(os.path.join("{sample}", "Step_6", "gatk", "{sample}_out.fa"), sample=samples),
        'time/end_time.txt',

rule get_start_time:
    output:
        start_time = 'time/start_time.txt'
    priority: 100
    shell:
        '''
        python get_time_script/get_start_time.py
        '''

rule first_fastqc:
    input:
        r1 = os.path.join("Uploaded_files", "{sample}", "{sample}.R1.fastq.gz"),
        r2 = os.path.join("Uploaded_files", "{sample}", "{sample}.R2.fastq.gz"),
    output:
        html_r1 = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}.R1_fastqc.html"),
        zip_r1 = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}.R1_fastqc.zip"),
        html_r2 = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}.R2_fastqc.html"),
        zip_r2 = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}.R2_fastqc.zip"),
    params:
        sample = "{sample}"
    priority: 99,
    log:
        log = os.path.join("{sample}", "logs", "Step_1","fastqc_pre", "{sample}.log")
    shell:
        """
        {config[fastqc][fastqc_command]} {input.r1} {input.r2} --outdir={params.sample}/Step_1/QC/pre
        """

rule first_multiqc:
    input:
        html_r1 = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}.R1_fastqc.html"),
        zip_r1 = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}.R1_fastqc.zip"),
        html_r2 = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}.R2_fastqc.html"),
        zip_r2 = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}.R2_fastqc.zip"),
    output:
        multiqc_file = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}_multiqc.html"),
        multiqc_dir = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}_multiqc_data"),
    params:
        directory = os.path.join("{sample}", "Step_1", "QC", "pre"),
        filename = os.path.join("{sample}", "Step_1", "QC", "pre", "{sample}_multiqc"),
    priority: 98,
    log:
        log = os.path.join("{sample}", "logs", "Step_1", "multiqc_pre", "{sample}.log"),
    shell:
        """
        multiqc --force {params.directory} -n {params.filename}
        """

rule trimmomatic_pe:
    input:
        r1 = os.path.join("Uploaded_files", "{sample}", "{sample}.R1.fastq.gz"),
        r2 = os.path.join("Uploaded_files", "{sample}", "{sample}.R2.fastq.gz"),
    output:
        r1_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r1_paired.fastq.gz"),
        r1_unpaired = os.path.join("{sample}", "Step_1", "trimmed_unpaired", "{sample}_r1_unpaired.fastq.gz"),
        r2_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r2_paired.fastq.gz"),
        r2_unpaired = os.path.join("{sample}", "Step_1", "trimmed_unpaired", "{sample}_r2_unpaired.fastq.gz"),
        output_command = os.path.join("{sample}", "logs", "trimmomatic_pe", "{sample}.command.log"),
    threads: 8,
    priority: 97,
    log:
        log = os.path.join("{sample}", "logs", "Step_1", "trimmomatic_pe", "{sample}.log")
    message: "Trimming Illumina adapters from {input.r1} and {input.r2}"
    params:
        # list of trimmers (see manual)
        trimmer=["CROP:151"],
        minilength=["MINLEN:50"],
        # optional parameters
        extra="-phred33",
    shell:
        """
        java -jar {config[trimmomatic][trimmomatic_jar]} PE -threads {threads} {config[trimmomatic][trimmomatic_phred]} -trimlog {log.log} {input.r1} {input.r2} {output.r1_paired} \
        {output.r1_unpaired} {output.r2_paired} {output.r2_unpaired} \
        {config[trimmomatic][trimmomatic_adapter_snakemake_variable]} LEADING:{config[trimmomatic][trimmomatic_leading]} TRAILING:{config[trimmomatic][trimmomatic_trailing]} SLIDINGWINDOW:{config[trimmomatic][trimmomatic_window_size]}:{config[trimmomatic][trimmomatic_window_quality]} MINLEN:{config[trimmomatic][trimmomatic_minlen]} &> {output.output_command}
        """


rule second_fastqc:
    input:
        r1_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r1_paired.fastq.gz"),
        # r1_unpaired = os.path.join("{sample}", "Step_1", "trimmed_unpaired", "{sample}_r1_unpaired.fastq.gz"),
        r2_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r2_paired.fastq.gz"),
        # r2_unpaired = os.path.join("{sample}", "Step_1", "trimmed_unpaired", "{sample}_r2_unpaired.fastq.gz"),
    output:
        html_r1_paired = os.path.join(
            "{sample}", "Step_1", "QC", "post", "{sample}_r1_paired_fastqc.html"),
        zip_r1_paired = os.path.join(
            "{sample}", "Step_1", "QC", "post", "{sample}_r1_paired_fastqc.zip"),
        # html_r1_unpaired = os.path.join(
        #     "{sample}", "Step_1", "QC", "post", "{sample}_r1_unpaired_fastqc.html"),
        # zip_r1_unpaired = os.path.join(
        #     "{sample}", "Step_1", "QC", "post", "{sample}_r1_unpaired_fastqc.zip"),
        html_r2_paired = os.path.join(
            "{sample}", "Step_1", "QC", "post", "{sample}_r2_paired_fastqc.html"),
        zip_r2_paired = os.path.join(
            "{sample}", "Step_1", "QC", "post", "{sample}_r2_paired_fastqc.zip"),
        # html_r2_unpaired = os.path.join(
        #     "{sample}", "Step_1", "QC", "post", "{sample}_r2_unpaired_fastqc.html"),
        # zip_r2_unpaired = os.path.join(
        #     "{sample}", "Step_1", "QC", "post", "{sample}_r2_unpaired_fastqc.zip"),
    threads: 8,
    priority: 96,
    params:
        sample = "{sample}"
    log:
        log = os.path.join("{sample}", "logs", "Step_1", "fastqc_post", "{sample}.log"),
    shell:
        """
        {config[fastqc][fastqc_command]} --threads {threads} {input.r1_paired} {input.r2_paired} --outdir={params.sample}/Step_1/QC/post
        """
        # {config[fastqc][fastqc_command]} --threads {threads} {input.r1_paired} {input.r1_unpaired} {input.r2_paired} {input.r2_unpaired} --outdir={params.sample}/Step_1/QC/post

rule second_multiqc:
    input:
        html_r1_paired = os.path.join(
            "{sample}", "Step_1", "QC", "post", "{sample}_r1_paired_fastqc.html"),
        zip_r1_paired = os.path.join(
            "{sample}", "Step_1", "QC", "post", "{sample}_r1_paired_fastqc.zip"),
        # html_r1_unpaired = os.path.join(
        #     "{sample}", "Step_1", "QC", "post", "{sample}_r1_unpaired_fastqc.html"),
        # zip_r1_unpaired = os.path.join(
        #     "{sample}", "Step_1", "QC", "post", "{sample}_r1_unpaired_fastqc.zip"),
        html_r2_paired = os.path.join(
            "{sample}", "Step_1", "QC", "post", "{sample}_r2_paired_fastqc.html"),
        zip_r2_paired = os.path.join(
            "{sample}", "Step_1", "QC", "post", "{sample}_r2_paired_fastqc.zip"),
        # html_r2_unpaired = os.path.join(
        #     "{sample}", "Step_1", "QC", "post", "{sample}_r2_unpaired_fastqc.html"),
        # zip_r2_unpaired = os.path.join(
        #     "{sample}", "Step_1", "QC", "post", "{sample}_r2_unpaired_fastqc.zip"),
    output:
        multiqc_file = os.path.join("{sample}", "Step_1", "QC", "post", "{sample}_multiqc.html"),
        multiqc_dir = os.path.join("{sample}", "Step_1", "QC", "post", "{sample}_multiqc_data"),
    params:
        directory = os.path.join("{sample}", "Step_1", "QC", "post"),
        filename = os.path.join("{sample}", "Step_1", "QC", "post", "{sample}_multiqc"),
    priority: 95,
    log:
        log = os.path.join("{sample}", "logs", "Step_1", "multiqc_post", "{sample}.log"),
    shell:
        """
        multiqc --force {params.directory} -n {params.filename}
        """

# rule a5_miseq_denovo_assembly:
#     input:
#         r1_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r1_paired.fastq.gz"),
#         r2_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r2_paired.fastq.gz"),
#     output:
#         contigs_fasta = os.path.join("{sample}_a5.contigs.fasta"),
#         contigs_fastq = os.path.join("{sample}_a5.contigs.fastq"),
#         contigs_qvl = os.path.join("{sample}_a5.contigs.qvl"),
#         final_scaffolds_fasta = os.path.join("{sample}_a5.final.scaffolds.fasta.contigs.fsa"),
#         assembly_stats_csv = os.path.join("{sample}_a5.assembly_stats.csv"),
#     params:
#         a5_base_dir = "{sample}_a5"
#     priority: 94,
#     log:
#         log = os.path.join("{sample}", "logs", "Step_2", "a5_miseq", "{sample}.log"),
#     shell:
#         """
#         a5_pipeline.pl {config[a5_miseq][a5_pipeline_pl_begin_command]} {config[a5_miseq][a5_pipeline_pl_end_command]} {input.r1_paired} {input.r2_paired} {params.a5_base_dir}
#         """
#
# rule a5_miseq_denovo_assembly_move:
#     output:
#         contigs_fasta = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.fasta"),
#         contigs_fastq = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.fastq"),
#         contigs_qvl = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.qvl"),
#         final_scaffolds_fasta = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.final.scaffolds.fasta.contigs.fsa"),
#         assembly_stats_csv = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.assembly_stats.csv"),
#     params:
#         mv_from = "{sample}_a5*",
#         mv_to = os.path.join("{sample}", "Step_2", "a5_miseq")
#     priority: 93,
#     shell:
#         """
#         mv {params.mv_from} {params.mv_to}
#         """


rule a5_miseq_denovo_assembly:
    input:
        r1_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r1_paired.fastq.gz"),
        r2_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r2_paired.fastq.gz"),
    output:
        contigs_fasta = os.path.join("{sample}_a5.contigs.fasta"),
        contigs_fastq = os.path.join("{sample}_a5.contigs.fastq"),
        contigs_qvl = os.path.join("{sample}_a5.contigs.qvl"),
        final_scaffolds_fasta = os.path.join("{sample}_a5.final.scaffolds.fasta.contigs.fsa"),
        assembly_stats_csv = os.path.join("{sample}_a5.assembly_stats.csv"),
    params:
        a5_base_dir = "{sample}_a5",
        mv_from = "{sample}_a5*",
        mv_to = os.path.join("{sample}", "Step_2", "a5_miseq")
    priority: 94,
    log:
        log = os.path.join("{sample}", "logs", "Step_2", "a5_miseq", "{sample}.log"),
    shell:
        """
        a5_pipeline.pl {config[a5_miseq][a5_pipeline_pl_begin_command]} {config[a5_miseq][a5_pipeline_pl_end_command]} {input.r1_paired} {input.r2_paired} {params.a5_base_dir} --threads 16
        """
        # mv {params.mv_from} {params.mv_to}

rule a5_miseq_denovo_assembly_move:
    output:
        contigs_fasta = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.fasta"),
        contigs_fastq = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.fastq"),
        contigs_qvl = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.qvl"),
        final_scaffolds_fasta = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.final.scaffolds.fasta.contigs.fsa"),
        assembly_stats_csv = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.assembly_stats.csv"),
    params:
        mv_from = "{sample}_a5*",
        mv_to = os.path.join("{sample}", "Step_2", "a5_miseq")
    priority: 93,
    shell:
        """
        mv {params.mv_from} {params.mv_to}
        """






rule quast_assembly_assessment:
    input:
        contigs_fasta = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.fasta")
    output:
        contig_size_viewer_html = os.path.join("{sample}", "Step_3", "quast", "icarus_viewers", "contig_size_viewer.html"),
        icarus_html = os.path.join("{sample}", "Step_3", "quast", "icarus.html"),
        report_html = os.path.join("{sample}", "Step_3", "quast", "report.html"),
        report_tsv = os.path.join("{sample}", "Step_3", "quast", "report.tsv"),
        report_pdf = os.path.join("{sample}", "Step_3", "quast", "report.pdf"),
    params:
        directory = os.path.join("{sample}", "Step_3", "quast"),
    priority: 92,
    log:
        log = os.path.join("{sample}", "logs", "Step_3", "quast", "{sample}.log"),
    shell:
        """
        quast.py {input.contigs_fasta} --output-dir {params.directory}
        """

rule bowtie2_assembly_assessment_1:
    output:
        bowtie2_index_folder = os.path.join("{sample}", "Step_3", "bowtie2", "bowtie_index"),
    priority: 91,
    shell:
        """
        mkdir {output.bowtie2_index_folder}
        """

rule bowtie2_assembly_assessment_2:
    input:
        contigs_fasta = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.fasta"),
    output:
        bowtie2_output_1 = os.path.join("{sample}", "Step_3", "bowtie2", "bowtie_index", "{sample}.1.bt2")
    params:
        bowtie2_output_prefix = os.path.join("{sample}", "Step_3", "bowtie2", "bowtie_index", "{sample}"),
    priority: 90,
    log:
        log = os.path.join("{sample}", "logs", "Step_3", "bowtie2_index", "{sample}.log"),
    shell:
        """
        bowtie2-build {input.contigs_fasta} {params.bowtie2_output_prefix}
        """

rule bowtie2_assembly_assessment_3:
    input:
        r1_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r1_paired.fastq.gz"),
        r2_paired = os.path.join("{sample}", "Step_1", "trimmed_paired", "{sample}_r2_paired.fastq.gz"),
    output:
        bowtie2_output_bam = os.path.join("{sample}", "Step_3", "bowtie2", "{sample}.bam")
    params:
        bowtie2_output_prefix = os.path.join("{sample}", "Step_3", "bowtie2", "bowtie_index", "{sample}")
    priority: 89,
    log:
        log = os.path.join("{sample}", "logs", "Step_3", "bowtie2_alignment", "{sample}.log"),
    shell:
        """
        bowtie2 -p 8 -x {params.bowtie2_output_prefix} -1 {input.r1_paired} -2 {input.r1_paired} > {output.bowtie2_output_bam} 2> {log.log}
        """

rule samtools_fixmate_1:
    input:
        bowtie2_output_bam = os.path.join("{sample}", "Step_3", "bowtie2", "{sample}.bam")
    output:
        samtools_bam = os.path.join("{sample}", "Step_4", "samtools", "{sample}_fixmate.bam"),
    params:
    priority: 88,
    log:
        log = os.path.join("{sample}", "logs", "Step_4", "samtools_fixmate", "{sample}.log"),
    shell:
        """
        samtools fixmate -O bam {input.bowtie2_output_bam} {output.samtools_bam}
        """

rule samtools_sort_2:
    input:
        samtools_bam = os.path.join("{sample}", "Step_4", "samtools", "{sample}_fixmate.bam"),
    output:
        samtools_sorted_bam = os.path.join("{sample}", "Step_4", "samtools", "{sample}_sorted.bam"),
    params:
    priority: 87,
    log:
        log = os.path.join("{sample}", "logs", "Step_4", "samtools_sorted", "{sample}.log"),
    shell:
        """
        samtools sort -O bam -o {output.samtools_sorted_bam} {input.samtools_bam}
        """


rule bcftools_mpileup_1:
    input:
        contigs_fasta = os.path.join("{sample}", "Step_2", "a5_miseq", "{sample}_a5.contigs.fasta"),
        samtools_sorted_bam = os.path.join("{sample}", "Step_4", "samtools", "{sample}_sorted.bam"),
    output:
        bcftools_vcf = os.path.join("{sample}", "Step_5", "bcftools", "{sample}.vcf"),
    params:
    priority: 85,
    log:
        log = os.path.join("{sample}", "logs", "Step_5", "bcftools_vcf", "{sample}_vcf.log"),
    shell:
        """
        bcftools mpileup -Ou -f {input.contigs_fasta} {input.samtools_sorted_bam} | bcftools call -vmO v -o {output.bcftools_vcf}
        """


rule sed_vcf_revise:
    input:
        bcftools_vcf = os.path.join("{sample}", "Step_5", "bcftools", "{sample}.vcf"),
    output:
        bcftools_revise_vcf = os.path.join("{sample}", "Step_5", "bcftools", "{sample}_revise.vcf"),
    params:
        origin_chromosome_name = "NC_000962.3",
        target_chromosome_name = "Chromosome",
    priority: 84,
    log:
        log = os.path.join("{sample}", "logs", "Step_5", "bcftools_vcf_revise", "{sample}_revise_vcf.log"),
    shell:
        """
        sed 's/{params.origin_chromosome_name}/{params.target_chromosome_name}/g' "{input.bcftools_vcf}" > {output.bcftools_revise_vcf}
        """

rule gzip_vcf_file:
    input:
        bcftools_revise_vcf = os.path.join("{sample}", "Step_5", "bcftools", "{sample}_revise.vcf"),
    output:
        bcftools_revise_vcf_gz = os.path.join("{sample}", "Step_5", "bcftools", "{sample}_revise.vcf.gz"),
    priority: 83,
    log:
        log = os.path.join("{sample}", "logs", "Step_5", "bcftools_vcf_revise_gzip", "{sample}_revise_vcf.gz.log"),
    shell:
        """
        bgzip < {input.bcftools_revise_vcf} > {output.bcftools_revise_vcf_gz}
        """


rule snpeff_1:
    input:
        bcftools_revise_vcf = os.path.join("{sample}", "Step_5", "bcftools", "{sample}_revise.vcf"),
    output:
        snpeff_ann_vcf = os.path.join("{sample}", "Step_6", "snpeff", "{sample}.ann.vcf"),
        stats_html_summary = os.path.join("{sample}", "Step_6", "snpeff", "{sample}_snpEff_summary.html"),
        # stats_txt_genes= os.path.join("{sample}", "Step_5", "snpeff", "{sample}"),
    params:
    priority: 82,
    log:
        log = os.path.join("{sample}", "logs", "Step_6", "snpeff_ann_vcf", "{sample}.log"),
    shell:
        """
        java -Xmx4g -jar {config[snpEff][snpEff_jar]} -c {config[snpEff][snpEff_config]} Mycobacterium_tuberculosis_h37rv -stats {output.stats_html_summary} {input.bcftools_revise_vcf} > {output.snpeff_ann_vcf}
        """








rule gatk_1:
    input:
        snpeff_vcf = os.path.join("{sample}", "Step_5", "snpeff", "{sample}.ann.vcf"),
    output:
        gatk_dict = os.path.join("{sample}", "Step_6", "gatk", "{sample}.dict"),
    params:
    priority: 85,
    log:
        log = os.path.join("{sample}", "logs", "gatk_CreateSequenceDictionary", "{sample}.log"),
    shell:
        """
        java -jar {config[gatk][gatk_jar]} CreateSequenceDictionary -R {config[bwa][bwa_pathogen_dir]} -O {output.gatk_dict}
        """

rule gatk_2:
    input:
        bcftools_vcf = os.path.join("{sample}", "Step_4", "bcftools", "{sample}_revise.vcf.gz"),
    output:
        gatk_vcf_gz_tbi = os.path.join("{sample}", "Step_6", "gatk", "{sample}.vcf.gz.tbi"),
    params:
    priority: 84,
    log:
        log = os.path.join("{sample}", "logs", "snpeff_IndexFeatureFile", "{sample}.log"),
    shell:
        """
        java -jar {config[gatk][gatk_jar]} IndexFeatureFile -F {input.bcftools_vcf}
        """

rule gatk_3:
    input:
        bcftools_vcf = os.path.join("{sample}", "Step_4", "bcftools", "{sample}_revise.vcf.gz"),
    output:
        gatk_out_fa = os.path.join("{sample}", "Step_6", "gatk", "{sample}_out.fa"),
    params:
    priority: 83,
    log:
        log = os.path.join("{sample}", "logs", "snpeff_FastaAlternateReferenceMaker", "{sample}.log"),
    shell:
        """
        java -jar {config[gatk][gatk_jar]} FastaAlternateReferenceMaker -R {config[bwa][bwa_pathogen_dir]} -V {input.bcftools_vcf} --output {output.gatk_out_fa}
        """


rule get_end_time:
    output:
        end_time = 'time/end_time.txt',
    priority: 0,
    shell:
        '''
        python get_time_script/get_end_time.py
        '''

#------------ include rules -----------
# include: "./rules/trimmomatic_trimming_PE.snakefile"
# include: "./rules/bwa_alignment.snakefile"


#------------ setup report ------------
