from snakemake.utils import min_version
import os
from snakemake.shell import shell
import pandas as pd

__author__ = 'Kuan-Hao Chao <b05901180@ntu.edu.tw>'

#------------ Config setup ------------
configfile: "config.yaml"
print(os.path.join(config["datadir"], config["se_or_pe"]))
workdir: os.path.join(config["datadir"])
trimmomatic_jar = config["trimmomatic"]["trimmomatic_jar"]
# pipesDir = os.path.join(os.path.expanduser(config['bin_dir']), 'pipes', 'rules')

# Tabular configuration
# samples = pd.read_table(config["samples"]).set_index("sample", drop=FALSE)
# validate(samples, schema="schemas/cells.schema.yaml")

#------------ Definition fo all_input ------
samples = {os.path.splitext(os.path.splitext(os.path.splitext(f)[0])[0])[0] for f in os.listdir(os.path.join(config["datadir"], config["se_or_pe"])) if f.endswith(".fastq.gz")}
print(samples)

#------------ Target File -------------

rule targets:
    input:
        expand(os.path.join("fastqc", "pre", "{sample}.R1_fastqc.html"), sample=samples),
        os.path.join("fastqc", "pre", "multiqc.html"),
        expand(os.path.join("trimmed_paired", "{sample}_r1_paired.fastq.gz"), sample=samples),
        expand(os.path.join("fastqc", "post", "{sample}_r1_paired_fastqc.html"), sample=samples),

rule first_fastqc:
    input:
        r1 = os.path.join(config["se_or_pe"], "{sample}.R1.fastq.gz"),
        r2 = os.path.join(config["se_or_pe"], "{sample}.R2.fastq.gz"),
    output:
        html_r1 = os.path.join("fastqc", "pre", "{sample}.R1_fastqc.html"),
        zip_r1 = os.path.join("fastqc", "pre", "{sample}.R1_fastqc.zip"),
        html_r2 = os.path.join("fastqc", "pre", "{sample}.R2_fastqc.html"),
        zip_r2 = os.path.join("fastqc", "pre", "{sample}.R2_fastqc.zip"),
    log:
        log = os.path.join("logs", "fastqc_pre", "{sample}.log")
    shell:
        """
        {config[fastqc][fastqc_command]} {input.r1} {input.r2} --outdir=fastqc/pre
        """

rule first_multiqc:
    input:
        html_r1 = os.path.join("fastqc", "pre", "{sample}.R1_fastqc.html"),
        zip_r1 = os.path.join("fastqc", "pre", "{sample}.R1_fastqc.zip"),
        html_r2 = os.path.join("fastqc", "pre", "{sample}.R2_fastqc.html"),
        zip_r2 = os.path.join("fastqc", "pre", "{sample}.R2_fastqc.zip"),
    output:
        multiqc_file = os.path.join("fastqc", "pre", "multiqc.html"),
    log:
        log = os.path.join("logs", "multiqc", "{sample}.log"),
    shell:
        """
        multiqc --force {os.path.join("fastqc", "pre")}
        """

rule trimmomatic_pe:
    input:
        r1 = os.path.join(config["se_or_pe"], "{sample}.R1.fastq.gz"),
        r2 = os.path.join(config["se_or_pe"], "{sample}.R2.fastq.gz"),
    output:
        r1_paired = os.path.join("trimmed_paired", "{sample}_r1_paired.fastq.gz"),
        r1_unpaired = os.path.join("trimmed_unpaired", "{sample}_r1_unpaired.fastq.gz"),
        r2_paired = os.path.join("trimmed_paired", "{sample}_r2_paired.fastq.gz"),
        r2_unpaired = os.path.join("trimmed_unpaired", "{sample}_r2_unpaired.fastq.gz"),
    log:
        log = os.path.join("logs", "trimmomatic_pe", "{sample}.log")
    message: "Trimming Illumina adapters from {input.r1} and {input.r2}"
    params:
        # list of trimmers (see manual)
        trimmer=["CROP:151"],
        minilength=["MINLEN:50"],
        # optional parameters
        extra="-phred33",
    shell:
        """
        java -jar {config[trimmomatic][trimmomatic_jar]} PE -threads {config[trimmomatic][threads]} {config[trimmomatic][phred]} {input.r1} {input.r2} {output.r1_paired} \
        {output.r1_unpaired} {output.r2_paired} {output.r2_unpaired} \
        ILLUMINACLIP:{config[trimmomatic][adapter]}{config[trimmomatic][adapter_param]} LEADING:{config[trimmomatic][leading]} TRAILING:{config[trimmomatic][trailing]} SLIDINGWINDOW:{config[trimmomatic][window_size]}:{config[trimmomatic][window_quality]} MINLEN:{config[trimmomatic][minlen]}
        """


rule second_fastqc:
    input:
        r1_paired = os.path.join("trimmed_paired", "{sample}_r1_paired.fastq.gz"),
        r1_unpaired = os.path.join("trimmed_unpaired", "{sample}_r1_unpaired.fastq.gz"),
        r2_paired = os.path.join("trimmed_paired", "{sample}_r2_paired.fastq.gz"),
        r2_unpaired = os.path.join("trimmed_unpaired", "{sample}_r2_unpaired.fastq.gz"),
    output:
        html_r1_paired = os.path.join("fastqc", "post", "{sample}_r1_paired_fastqc.html"),
        zip_r1_paired = os.path.join("fastqc", "post", "{sample}_r1_paired_fastqc.zip"),
        html_r1_unpaired = os.path.join("fastqc", "post", "{sample}_r1_unpaired_fastqc.html"),
        zip_r1_unpaired = os.path.join("fastqc", "post", "{sample}_r1_unpaired_fastqc.zip"),
        html_r2_paired = os.path.join("fastqc", "post", "{sample}_r2_paired_fastqc.html"),
        zip_r2_paired = os.path.join("fastqc", "post", "{sample}_r2_paired_fastqc.zip"),
        html_r2_unpaired = os.path.join("fastqc", "post", "{sample}_r2_unpaired_fastqc.html"),
        zip_r2_unpaired = os.path.join("fastqc", "post", "{sample}_r2_unpaired_fastqc.zip"),
    log:
        log = os.path.join("logs", "fastqc_post", "{sample}.log")
    shell:
        """
        {config[fastqc][fastqc_command]} {input.r1_paired} {input.r1_unpaired} {input.r2_paired} {input.r2_unpaired} --outdir=fastqc/post
        """

# rule bwa_mem:
#     input:
#         trimmed_r1 = os.path.join("trimmed_paired", "{sample}_r1_paired.fastq.gz"),
#         trimmed_r2 = os.path.join("trimmed_paired", "{sample}_r2_paired.fastq.gz"),
#     output:
#         "mapped/{sample}.bam"
#         sam = os.path.join("bam", "{sample}.bam"),
#     log:
#         log = os.path.join("logs", "bwa_mem", "{sample}.log")
#     params:
#         index="genome",
#         extra=r"-R '@RG\tID:{sample}\tSM:{sample}'",
#         sort="none",             # Can be 'none', 'samtools' or 'picard'.
#         sort_order="queryname",  # Can be 'queryname' or 'coordinate'.
#         sort_extra=""            # Extra args for samtools/picard.
#     threads: 8
#     shell:
#         """
#         bwa mem ./ref/chlSab2.fa ./trim/P96_S12_R1_paired.fastq.gz ./trim/P96_S12_R2_paired.fastq.gz > ./sam/P96.sam;
#         """

#------------ include rules -----------
# include: "./rules/trimmomatic_trimming_PE.snakefile"
# include: "./rules/bwa_alignment.snakefile"


#------------ setup report ------------
